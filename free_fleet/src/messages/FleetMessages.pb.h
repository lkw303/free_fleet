// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FleetMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FleetMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FleetMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FleetMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FleetMessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FleetMessages_2eproto;
namespace free_fleet_data {
class DestinationRequest;
struct DestinationRequestDefaultTypeInternal;
extern DestinationRequestDefaultTypeInternal _DestinationRequest_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class ModeParameter;
struct ModeParameterDefaultTypeInternal;
extern ModeParameterDefaultTypeInternal _ModeParameter_default_instance_;
class ModeRequest;
struct ModeRequestDefaultTypeInternal;
extern ModeRequestDefaultTypeInternal _ModeRequest_default_instance_;
class PathRequest;
struct PathRequestDefaultTypeInternal;
extern PathRequestDefaultTypeInternal _PathRequest_default_instance_;
class RobotState;
struct RobotStateDefaultTypeInternal;
extern RobotStateDefaultTypeInternal _RobotState_default_instance_;
}  // namespace free_fleet_data
PROTOBUF_NAMESPACE_OPEN
template<> ::free_fleet_data::DestinationRequest* Arena::CreateMaybeMessage<::free_fleet_data::DestinationRequest>(Arena*);
template<> ::free_fleet_data::Location* Arena::CreateMaybeMessage<::free_fleet_data::Location>(Arena*);
template<> ::free_fleet_data::ModeParameter* Arena::CreateMaybeMessage<::free_fleet_data::ModeParameter>(Arena*);
template<> ::free_fleet_data::ModeRequest* Arena::CreateMaybeMessage<::free_fleet_data::ModeRequest>(Arena*);
template<> ::free_fleet_data::PathRequest* Arena::CreateMaybeMessage<::free_fleet_data::PathRequest>(Arena*);
template<> ::free_fleet_data::RobotState* Arena::CreateMaybeMessage<::free_fleet_data::RobotState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace free_fleet_data {

enum RobotMode : int {
  MODE_IDLE = 0,
  MODE_CHARGING = 1,
  MODE_MOVING = 2,
  MODE_PAUSED = 3,
  MODE_WAITING = 4,
  MODE_EMERGENCY = 5,
  MODE_GOING_HOME = 6,
  MODE_DOCKING = 7,
  MODE_REQUEST_ERROR = 8
};
bool RobotMode_IsValid(int value);
constexpr RobotMode RobotMode_MIN = MODE_IDLE;
constexpr RobotMode RobotMode_MAX = MODE_REQUEST_ERROR;
constexpr int RobotMode_ARRAYSIZE = RobotMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotMode_descriptor();
template<typename T>
inline const std::string& RobotMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotMode_descriptor(), enum_t_value);
}
inline bool RobotMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RobotMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotMode>(
    RobotMode_descriptor(), name, value);
}
// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:free_fleet_data.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit constexpr Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "free_fleet_data.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelNameFieldNumber = 6,
    kSecFieldNumber = 1,
    kNanosecFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kYawFieldNumber = 5,
  };
  // required string level_name = 6;
  bool has_level_name() const;
  private:
  bool _internal_has_level_name() const;
  public:
  void clear_level_name();
  const std::string& level_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level_name();
  PROTOBUF_NODISCARD std::string* release_level_name();
  void set_allocated_level_name(std::string* level_name);
  private:
  const std::string& _internal_level_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level_name(const std::string& value);
  std::string* _internal_mutable_level_name();
  public:

  // required int32 sec = 1;
  bool has_sec() const;
  private:
  bool _internal_has_sec() const;
  public:
  void clear_sec();
  int32_t sec() const;
  void set_sec(int32_t value);
  private:
  int32_t _internal_sec() const;
  void _internal_set_sec(int32_t value);
  public:

  // required uint32 nanosec = 2;
  bool has_nanosec() const;
  private:
  bool _internal_has_nanosec() const;
  public:
  void clear_nanosec();
  uint32_t nanosec() const;
  void set_nanosec(uint32_t value);
  private:
  uint32_t _internal_nanosec() const;
  void _internal_set_nanosec(uint32_t value);
  public:

  // required float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float yaw = 5;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:free_fleet_data.Location)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_name_;
  int32_t sec_;
  uint32_t nanosec_;
  float x_;
  float y_;
  float yaw_;
  friend struct ::TableStruct_FleetMessages_2eproto;
};
// -------------------------------------------------------------------

class RobotState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:free_fleet_data.RobotState) */ {
 public:
  inline RobotState() : RobotState(nullptr) {}
  ~RobotState() override;
  explicit constexpr RobotState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotState(const RobotState& from);
  RobotState(RobotState&& from) noexcept
    : RobotState() {
    *this = ::std::move(from);
  }

  inline RobotState& operator=(const RobotState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotState& operator=(RobotState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotState* internal_default_instance() {
    return reinterpret_cast<const RobotState*>(
               &_RobotState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotState& a, RobotState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "free_fleet_data.RobotState";
  }
  protected:
  explicit RobotState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 7,
    kNameFieldNumber = 1,
    kModelFieldNumber = 2,
    kTaskIdFieldNumber = 3,
    kLocationFieldNumber = 6,
    kModeFieldNumber = 4,
    kBatteryPercentFieldNumber = 5,
  };
  // repeated .free_fleet_data.Location path = 7;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  ::free_fleet_data::Location* mutable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location >*
      mutable_path();
  private:
  const ::free_fleet_data::Location& _internal_path(int index) const;
  ::free_fleet_data::Location* _internal_add_path();
  public:
  const ::free_fleet_data::Location& path(int index) const;
  ::free_fleet_data::Location* add_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location >&
      path() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // required string task_id = 3;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required .free_fleet_data.Location location = 6;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::free_fleet_data::Location& location() const;
  PROTOBUF_NODISCARD ::free_fleet_data::Location* release_location();
  ::free_fleet_data::Location* mutable_location();
  void set_allocated_location(::free_fleet_data::Location* location);
  private:
  const ::free_fleet_data::Location& _internal_location() const;
  ::free_fleet_data::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::free_fleet_data::Location* location);
  ::free_fleet_data::Location* unsafe_arena_release_location();

  // required .free_fleet_data.RobotMode mode = 4;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::free_fleet_data::RobotMode mode() const;
  void set_mode(::free_fleet_data::RobotMode value);
  private:
  ::free_fleet_data::RobotMode _internal_mode() const;
  void _internal_set_mode(::free_fleet_data::RobotMode value);
  public:

  // required float battery_percent = 5;
  bool has_battery_percent() const;
  private:
  bool _internal_has_battery_percent() const;
  public:
  void clear_battery_percent();
  float battery_percent() const;
  void set_battery_percent(float value);
  private:
  float _internal_battery_percent() const;
  void _internal_set_battery_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:free_fleet_data.RobotState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location > path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::free_fleet_data::Location* location_;
  int mode_;
  float battery_percent_;
  friend struct ::TableStruct_FleetMessages_2eproto;
};
// -------------------------------------------------------------------

class ModeParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:free_fleet_data.ModeParameter) */ {
 public:
  inline ModeParameter() : ModeParameter(nullptr) {}
  ~ModeParameter() override;
  explicit constexpr ModeParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeParameter(const ModeParameter& from);
  ModeParameter(ModeParameter&& from) noexcept
    : ModeParameter() {
    *this = ::std::move(from);
  }

  inline ModeParameter& operator=(const ModeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeParameter& operator=(ModeParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeParameter* internal_default_instance() {
    return reinterpret_cast<const ModeParameter*>(
               &_ModeParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModeParameter& a, ModeParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModeParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "free_fleet_data.ModeParameter";
  }
  protected:
  explicit ModeParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:free_fleet_data.ModeParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_FleetMessages_2eproto;
};
// -------------------------------------------------------------------

class ModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:free_fleet_data.ModeRequest) */ {
 public:
  inline ModeRequest() : ModeRequest(nullptr) {}
  ~ModeRequest() override;
  explicit constexpr ModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeRequest(const ModeRequest& from);
  ModeRequest(ModeRequest&& from) noexcept
    : ModeRequest() {
    *this = ::std::move(from);
  }

  inline ModeRequest& operator=(const ModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeRequest& operator=(ModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeRequest* internal_default_instance() {
    return reinterpret_cast<const ModeRequest*>(
               &_ModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModeRequest& a, ModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "free_fleet_data.ModeRequest";
  }
  protected:
  explicit ModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 5,
    kFleetNameFieldNumber = 1,
    kRobotNameFieldNumber = 2,
    kTaskIdFieldNumber = 4,
    kModeFieldNumber = 3,
  };
  // repeated .free_fleet_data.ModeParameter parameters = 5;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::free_fleet_data::ModeParameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::ModeParameter >*
      mutable_parameters();
  private:
  const ::free_fleet_data::ModeParameter& _internal_parameters(int index) const;
  ::free_fleet_data::ModeParameter* _internal_add_parameters();
  public:
  const ::free_fleet_data::ModeParameter& parameters(int index) const;
  ::free_fleet_data::ModeParameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::ModeParameter >&
      parameters() const;

  // required string fleet_name = 1;
  bool has_fleet_name() const;
  private:
  bool _internal_has_fleet_name() const;
  public:
  void clear_fleet_name();
  const std::string& fleet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fleet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fleet_name();
  PROTOBUF_NODISCARD std::string* release_fleet_name();
  void set_allocated_fleet_name(std::string* fleet_name);
  private:
  const std::string& _internal_fleet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fleet_name(const std::string& value);
  std::string* _internal_mutable_fleet_name();
  public:

  // required string robot_name = 2;
  bool has_robot_name() const;
  private:
  bool _internal_has_robot_name() const;
  public:
  void clear_robot_name();
  const std::string& robot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_name();
  PROTOBUF_NODISCARD std::string* release_robot_name();
  void set_allocated_robot_name(std::string* robot_name);
  private:
  const std::string& _internal_robot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_name(const std::string& value);
  std::string* _internal_mutable_robot_name();
  public:

  // required string task_id = 4;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required .free_fleet_data.RobotMode mode = 3;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::free_fleet_data::RobotMode mode() const;
  void set_mode(::free_fleet_data::RobotMode value);
  private:
  ::free_fleet_data::RobotMode _internal_mode() const;
  void _internal_set_mode(::free_fleet_data::RobotMode value);
  public:

  // @@protoc_insertion_point(class_scope:free_fleet_data.ModeRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::ModeParameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fleet_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  int mode_;
  friend struct ::TableStruct_FleetMessages_2eproto;
};
// -------------------------------------------------------------------

class PathRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:free_fleet_data.PathRequest) */ {
 public:
  inline PathRequest() : PathRequest(nullptr) {}
  ~PathRequest() override;
  explicit constexpr PathRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathRequest(const PathRequest& from);
  PathRequest(PathRequest&& from) noexcept
    : PathRequest() {
    *this = ::std::move(from);
  }

  inline PathRequest& operator=(const PathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathRequest& operator=(PathRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathRequest* internal_default_instance() {
    return reinterpret_cast<const PathRequest*>(
               &_PathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PathRequest& a, PathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PathRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "free_fleet_data.PathRequest";
  }
  protected:
  explicit PathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kFleetNameFieldNumber = 1,
    kRobotNameFieldNumber = 2,
    kTaskIdFieldNumber = 4,
  };
  // repeated .free_fleet_data.Location path = 3;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  ::free_fleet_data::Location* mutable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location >*
      mutable_path();
  private:
  const ::free_fleet_data::Location& _internal_path(int index) const;
  ::free_fleet_data::Location* _internal_add_path();
  public:
  const ::free_fleet_data::Location& path(int index) const;
  ::free_fleet_data::Location* add_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location >&
      path() const;

  // required string fleet_name = 1;
  bool has_fleet_name() const;
  private:
  bool _internal_has_fleet_name() const;
  public:
  void clear_fleet_name();
  const std::string& fleet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fleet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fleet_name();
  PROTOBUF_NODISCARD std::string* release_fleet_name();
  void set_allocated_fleet_name(std::string* fleet_name);
  private:
  const std::string& _internal_fleet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fleet_name(const std::string& value);
  std::string* _internal_mutable_fleet_name();
  public:

  // required string robot_name = 2;
  bool has_robot_name() const;
  private:
  bool _internal_has_robot_name() const;
  public:
  void clear_robot_name();
  const std::string& robot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_name();
  PROTOBUF_NODISCARD std::string* release_robot_name();
  void set_allocated_robot_name(std::string* robot_name);
  private:
  const std::string& _internal_robot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_name(const std::string& value);
  std::string* _internal_mutable_robot_name();
  public:

  // required string task_id = 4;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // @@protoc_insertion_point(class_scope:free_fleet_data.PathRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location > path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fleet_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  friend struct ::TableStruct_FleetMessages_2eproto;
};
// -------------------------------------------------------------------

class DestinationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:free_fleet_data.DestinationRequest) */ {
 public:
  inline DestinationRequest() : DestinationRequest(nullptr) {}
  ~DestinationRequest() override;
  explicit constexpr DestinationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestinationRequest(const DestinationRequest& from);
  DestinationRequest(DestinationRequest&& from) noexcept
    : DestinationRequest() {
    *this = ::std::move(from);
  }

  inline DestinationRequest& operator=(const DestinationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestinationRequest& operator=(DestinationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DestinationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestinationRequest* internal_default_instance() {
    return reinterpret_cast<const DestinationRequest*>(
               &_DestinationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DestinationRequest& a, DestinationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DestinationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestinationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestinationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestinationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DestinationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DestinationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestinationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "free_fleet_data.DestinationRequest";
  }
  protected:
  explicit DestinationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFleetNameFieldNumber = 1,
    kRobotNameFieldNumber = 2,
    kTaskIdFieldNumber = 4,
    kDestinationFieldNumber = 3,
  };
  // required string fleet_name = 1;
  bool has_fleet_name() const;
  private:
  bool _internal_has_fleet_name() const;
  public:
  void clear_fleet_name();
  const std::string& fleet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fleet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fleet_name();
  PROTOBUF_NODISCARD std::string* release_fleet_name();
  void set_allocated_fleet_name(std::string* fleet_name);
  private:
  const std::string& _internal_fleet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fleet_name(const std::string& value);
  std::string* _internal_mutable_fleet_name();
  public:

  // required string robot_name = 2;
  bool has_robot_name() const;
  private:
  bool _internal_has_robot_name() const;
  public:
  void clear_robot_name();
  const std::string& robot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_name();
  PROTOBUF_NODISCARD std::string* release_robot_name();
  void set_allocated_robot_name(std::string* robot_name);
  private:
  const std::string& _internal_robot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_name(const std::string& value);
  std::string* _internal_mutable_robot_name();
  public:

  // required string task_id = 4;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // required .free_fleet_data.Location destination = 3;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::free_fleet_data::Location& destination() const;
  PROTOBUF_NODISCARD ::free_fleet_data::Location* release_destination();
  ::free_fleet_data::Location* mutable_destination();
  void set_allocated_destination(::free_fleet_data::Location* destination);
  private:
  const ::free_fleet_data::Location& _internal_destination() const;
  ::free_fleet_data::Location* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::free_fleet_data::Location* destination);
  ::free_fleet_data::Location* unsafe_arena_release_destination();

  // @@protoc_insertion_point(class_scope:free_fleet_data.DestinationRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fleet_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::free_fleet_data::Location* destination_;
  friend struct ::TableStruct_FleetMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// required int32 sec = 1;
inline bool Location::_internal_has_sec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Location::has_sec() const {
  return _internal_has_sec();
}
inline void Location::clear_sec() {
  sec_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Location::_internal_sec() const {
  return sec_;
}
inline int32_t Location::sec() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.Location.sec)
  return _internal_sec();
}
inline void Location::_internal_set_sec(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  sec_ = value;
}
inline void Location::set_sec(int32_t value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:free_fleet_data.Location.sec)
}

// required uint32 nanosec = 2;
inline bool Location::_internal_has_nanosec() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Location::has_nanosec() const {
  return _internal_has_nanosec();
}
inline void Location::clear_nanosec() {
  nanosec_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Location::_internal_nanosec() const {
  return nanosec_;
}
inline uint32_t Location::nanosec() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.Location.nanosec)
  return _internal_nanosec();
}
inline void Location::_internal_set_nanosec(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  nanosec_ = value;
}
inline void Location::set_nanosec(uint32_t value) {
  _internal_set_nanosec(value);
  // @@protoc_insertion_point(field_set:free_fleet_data.Location.nanosec)
}

// required float x = 3;
inline bool Location::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Location::has_x() const {
  return _internal_has_x();
}
inline void Location::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Location::_internal_x() const {
  return x_;
}
inline float Location::x() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.Location.x)
  return _internal_x();
}
inline void Location::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
}
inline void Location::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:free_fleet_data.Location.x)
}

// required float y = 4;
inline bool Location::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Location::has_y() const {
  return _internal_has_y();
}
inline void Location::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Location::_internal_y() const {
  return y_;
}
inline float Location::y() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.Location.y)
  return _internal_y();
}
inline void Location::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void Location::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:free_fleet_data.Location.y)
}

// required float yaw = 5;
inline bool Location::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Location::has_yaw() const {
  return _internal_has_yaw();
}
inline void Location::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Location::_internal_yaw() const {
  return yaw_;
}
inline float Location::yaw() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.Location.yaw)
  return _internal_yaw();
}
inline void Location::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000020u;
  yaw_ = value;
}
inline void Location::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:free_fleet_data.Location.yaw)
}

// required string level_name = 6;
inline bool Location::_internal_has_level_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Location::has_level_name() const {
  return _internal_has_level_name();
}
inline void Location::clear_level_name() {
  level_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Location::level_name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.Location.level_name)
  return _internal_level_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Location::set_level_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.Location.level_name)
}
inline std::string* Location::mutable_level_name() {
  std::string* _s = _internal_mutable_level_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.Location.level_name)
  return _s;
}
inline const std::string& Location::_internal_level_name() const {
  return level_name_.Get();
}
inline void Location::_internal_set_level_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  level_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_level_name() {
  _has_bits_[0] |= 0x00000001u;
  return level_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Location::release_level_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.Location.level_name)
  if (!_internal_has_level_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = level_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (level_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Location::set_allocated_level_name(std::string* level_name) {
  if (level_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  level_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (level_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    level_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.Location.level_name)
}

// -------------------------------------------------------------------

// RobotState

// required string name = 1;
inline bool RobotState::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RobotState::has_name() const {
  return _internal_has_name();
}
inline void RobotState::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RobotState::name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.RobotState.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RobotState::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.RobotState.name)
}
inline std::string* RobotState::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.RobotState.name)
  return _s;
}
inline const std::string& RobotState::_internal_name() const {
  return name_.Get();
}
inline void RobotState::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RobotState::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RobotState::release_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.RobotState.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RobotState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.RobotState.name)
}

// required string model = 2;
inline bool RobotState::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RobotState::has_model() const {
  return _internal_has_model();
}
inline void RobotState::clear_model() {
  model_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RobotState::model() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.RobotState.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RobotState::set_model(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.RobotState.model)
}
inline std::string* RobotState::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.RobotState.model)
  return _s;
}
inline const std::string& RobotState::_internal_model() const {
  return model_.Get();
}
inline void RobotState::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RobotState::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000002u;
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RobotState::release_model() {
  // @@protoc_insertion_point(field_release:free_fleet_data.RobotState.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RobotState::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.RobotState.model)
}

// required string task_id = 3;
inline bool RobotState::_internal_has_task_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RobotState::has_task_id() const {
  return _internal_has_task_id();
}
inline void RobotState::clear_task_id() {
  task_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RobotState::task_id() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.RobotState.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RobotState::set_task_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.RobotState.task_id)
}
inline std::string* RobotState::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.RobotState.task_id)
  return _s;
}
inline const std::string& RobotState::_internal_task_id() const {
  return task_id_.Get();
}
inline void RobotState::_internal_set_task_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RobotState::_internal_mutable_task_id() {
  _has_bits_[0] |= 0x00000004u;
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RobotState::release_task_id() {
  // @@protoc_insertion_point(field_release:free_fleet_data.RobotState.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = task_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RobotState::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.RobotState.task_id)
}

// required .free_fleet_data.RobotMode mode = 4;
inline bool RobotState::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RobotState::has_mode() const {
  return _internal_has_mode();
}
inline void RobotState::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::free_fleet_data::RobotMode RobotState::_internal_mode() const {
  return static_cast< ::free_fleet_data::RobotMode >(mode_);
}
inline ::free_fleet_data::RobotMode RobotState::mode() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.RobotState.mode)
  return _internal_mode();
}
inline void RobotState::_internal_set_mode(::free_fleet_data::RobotMode value) {
  assert(::free_fleet_data::RobotMode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
}
inline void RobotState::set_mode(::free_fleet_data::RobotMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:free_fleet_data.RobotState.mode)
}

// required float battery_percent = 5;
inline bool RobotState::_internal_has_battery_percent() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RobotState::has_battery_percent() const {
  return _internal_has_battery_percent();
}
inline void RobotState::clear_battery_percent() {
  battery_percent_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float RobotState::_internal_battery_percent() const {
  return battery_percent_;
}
inline float RobotState::battery_percent() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.RobotState.battery_percent)
  return _internal_battery_percent();
}
inline void RobotState::_internal_set_battery_percent(float value) {
  _has_bits_[0] |= 0x00000020u;
  battery_percent_ = value;
}
inline void RobotState::set_battery_percent(float value) {
  _internal_set_battery_percent(value);
  // @@protoc_insertion_point(field_set:free_fleet_data.RobotState.battery_percent)
}

// required .free_fleet_data.Location location = 6;
inline bool RobotState::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool RobotState::has_location() const {
  return _internal_has_location();
}
inline void RobotState::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::free_fleet_data::Location& RobotState::_internal_location() const {
  const ::free_fleet_data::Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::free_fleet_data::Location&>(
      ::free_fleet_data::_Location_default_instance_);
}
inline const ::free_fleet_data::Location& RobotState::location() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.RobotState.location)
  return _internal_location();
}
inline void RobotState::unsafe_arena_set_allocated_location(
    ::free_fleet_data::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:free_fleet_data.RobotState.location)
}
inline ::free_fleet_data::Location* RobotState::release_location() {
  _has_bits_[0] &= ~0x00000008u;
  ::free_fleet_data::Location* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::free_fleet_data::Location* RobotState::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:free_fleet_data.RobotState.location)
  _has_bits_[0] &= ~0x00000008u;
  ::free_fleet_data::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::free_fleet_data::Location* RobotState::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000008u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::free_fleet_data::Location>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::free_fleet_data::Location* RobotState::mutable_location() {
  ::free_fleet_data::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.RobotState.location)
  return _msg;
}
inline void RobotState::set_allocated_location(::free_fleet_data::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::free_fleet_data::Location>::GetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.RobotState.location)
}

// repeated .free_fleet_data.Location path = 7;
inline int RobotState::_internal_path_size() const {
  return path_.size();
}
inline int RobotState::path_size() const {
  return _internal_path_size();
}
inline void RobotState::clear_path() {
  path_.Clear();
}
inline ::free_fleet_data::Location* RobotState::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:free_fleet_data.RobotState.path)
  return path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location >*
RobotState::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:free_fleet_data.RobotState.path)
  return &path_;
}
inline const ::free_fleet_data::Location& RobotState::_internal_path(int index) const {
  return path_.Get(index);
}
inline const ::free_fleet_data::Location& RobotState::path(int index) const {
  // @@protoc_insertion_point(field_get:free_fleet_data.RobotState.path)
  return _internal_path(index);
}
inline ::free_fleet_data::Location* RobotState::_internal_add_path() {
  return path_.Add();
}
inline ::free_fleet_data::Location* RobotState::add_path() {
  ::free_fleet_data::Location* _add = _internal_add_path();
  // @@protoc_insertion_point(field_add:free_fleet_data.RobotState.path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location >&
RobotState::path() const {
  // @@protoc_insertion_point(field_list:free_fleet_data.RobotState.path)
  return path_;
}

// -------------------------------------------------------------------

// ModeParameter

// required string name = 1;
inline bool ModeParameter::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModeParameter::has_name() const {
  return _internal_has_name();
}
inline void ModeParameter::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModeParameter::name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.ModeParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModeParameter::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.ModeParameter.name)
}
inline std::string* ModeParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.ModeParameter.name)
  return _s;
}
inline const std::string& ModeParameter::_internal_name() const {
  return name_.Get();
}
inline void ModeParameter::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModeParameter::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModeParameter::release_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.ModeParameter.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModeParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.ModeParameter.name)
}

// required string value = 2;
inline bool ModeParameter::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModeParameter::has_value() const {
  return _internal_has_value();
}
inline void ModeParameter::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModeParameter::value() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.ModeParameter.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModeParameter::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.ModeParameter.value)
}
inline std::string* ModeParameter::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.ModeParameter.value)
  return _s;
}
inline const std::string& ModeParameter::_internal_value() const {
  return value_.Get();
}
inline void ModeParameter::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModeParameter::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModeParameter::release_value() {
  // @@protoc_insertion_point(field_release:free_fleet_data.ModeParameter.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModeParameter::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.ModeParameter.value)
}

// -------------------------------------------------------------------

// ModeRequest

// required string fleet_name = 1;
inline bool ModeRequest::_internal_has_fleet_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModeRequest::has_fleet_name() const {
  return _internal_has_fleet_name();
}
inline void ModeRequest::clear_fleet_name() {
  fleet_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModeRequest::fleet_name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.ModeRequest.fleet_name)
  return _internal_fleet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModeRequest::set_fleet_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 fleet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.ModeRequest.fleet_name)
}
inline std::string* ModeRequest::mutable_fleet_name() {
  std::string* _s = _internal_mutable_fleet_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.ModeRequest.fleet_name)
  return _s;
}
inline const std::string& ModeRequest::_internal_fleet_name() const {
  return fleet_name_.Get();
}
inline void ModeRequest::_internal_set_fleet_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fleet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModeRequest::_internal_mutable_fleet_name() {
  _has_bits_[0] |= 0x00000001u;
  return fleet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModeRequest::release_fleet_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.ModeRequest.fleet_name)
  if (!_internal_has_fleet_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = fleet_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fleet_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fleet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModeRequest::set_allocated_fleet_name(std::string* fleet_name) {
  if (fleet_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fleet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fleet_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fleet_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fleet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.ModeRequest.fleet_name)
}

// required string robot_name = 2;
inline bool ModeRequest::_internal_has_robot_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModeRequest::has_robot_name() const {
  return _internal_has_robot_name();
}
inline void ModeRequest::clear_robot_name() {
  robot_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ModeRequest::robot_name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.ModeRequest.robot_name)
  return _internal_robot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModeRequest::set_robot_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 robot_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.ModeRequest.robot_name)
}
inline std::string* ModeRequest::mutable_robot_name() {
  std::string* _s = _internal_mutable_robot_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.ModeRequest.robot_name)
  return _s;
}
inline const std::string& ModeRequest::_internal_robot_name() const {
  return robot_name_.Get();
}
inline void ModeRequest::_internal_set_robot_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  robot_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModeRequest::_internal_mutable_robot_name() {
  _has_bits_[0] |= 0x00000002u;
  return robot_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModeRequest::release_robot_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.ModeRequest.robot_name)
  if (!_internal_has_robot_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = robot_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    robot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModeRequest::set_allocated_robot_name(std::string* robot_name) {
  if (robot_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  robot_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    robot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.ModeRequest.robot_name)
}

// required .free_fleet_data.RobotMode mode = 3;
inline bool ModeRequest::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModeRequest::has_mode() const {
  return _internal_has_mode();
}
inline void ModeRequest::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::free_fleet_data::RobotMode ModeRequest::_internal_mode() const {
  return static_cast< ::free_fleet_data::RobotMode >(mode_);
}
inline ::free_fleet_data::RobotMode ModeRequest::mode() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.ModeRequest.mode)
  return _internal_mode();
}
inline void ModeRequest::_internal_set_mode(::free_fleet_data::RobotMode value) {
  assert(::free_fleet_data::RobotMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  mode_ = value;
}
inline void ModeRequest::set_mode(::free_fleet_data::RobotMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:free_fleet_data.ModeRequest.mode)
}

// required string task_id = 4;
inline bool ModeRequest::_internal_has_task_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModeRequest::has_task_id() const {
  return _internal_has_task_id();
}
inline void ModeRequest::clear_task_id() {
  task_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ModeRequest::task_id() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.ModeRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModeRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.ModeRequest.task_id)
}
inline std::string* ModeRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.ModeRequest.task_id)
  return _s;
}
inline const std::string& ModeRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void ModeRequest::_internal_set_task_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModeRequest::_internal_mutable_task_id() {
  _has_bits_[0] |= 0x00000004u;
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModeRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:free_fleet_data.ModeRequest.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = task_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModeRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.ModeRequest.task_id)
}

// repeated .free_fleet_data.ModeParameter parameters = 5;
inline int ModeRequest::_internal_parameters_size() const {
  return parameters_.size();
}
inline int ModeRequest::parameters_size() const {
  return _internal_parameters_size();
}
inline void ModeRequest::clear_parameters() {
  parameters_.Clear();
}
inline ::free_fleet_data::ModeParameter* ModeRequest::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:free_fleet_data.ModeRequest.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::ModeParameter >*
ModeRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:free_fleet_data.ModeRequest.parameters)
  return &parameters_;
}
inline const ::free_fleet_data::ModeParameter& ModeRequest::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::free_fleet_data::ModeParameter& ModeRequest::parameters(int index) const {
  // @@protoc_insertion_point(field_get:free_fleet_data.ModeRequest.parameters)
  return _internal_parameters(index);
}
inline ::free_fleet_data::ModeParameter* ModeRequest::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::free_fleet_data::ModeParameter* ModeRequest::add_parameters() {
  ::free_fleet_data::ModeParameter* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:free_fleet_data.ModeRequest.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::ModeParameter >&
ModeRequest::parameters() const {
  // @@protoc_insertion_point(field_list:free_fleet_data.ModeRequest.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// PathRequest

// required string fleet_name = 1;
inline bool PathRequest::_internal_has_fleet_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathRequest::has_fleet_name() const {
  return _internal_has_fleet_name();
}
inline void PathRequest::clear_fleet_name() {
  fleet_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PathRequest::fleet_name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.PathRequest.fleet_name)
  return _internal_fleet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathRequest::set_fleet_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 fleet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.PathRequest.fleet_name)
}
inline std::string* PathRequest::mutable_fleet_name() {
  std::string* _s = _internal_mutable_fleet_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.PathRequest.fleet_name)
  return _s;
}
inline const std::string& PathRequest::_internal_fleet_name() const {
  return fleet_name_.Get();
}
inline void PathRequest::_internal_set_fleet_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fleet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathRequest::_internal_mutable_fleet_name() {
  _has_bits_[0] |= 0x00000001u;
  return fleet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathRequest::release_fleet_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.PathRequest.fleet_name)
  if (!_internal_has_fleet_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = fleet_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fleet_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fleet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PathRequest::set_allocated_fleet_name(std::string* fleet_name) {
  if (fleet_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fleet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fleet_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fleet_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fleet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.PathRequest.fleet_name)
}

// required string robot_name = 2;
inline bool PathRequest::_internal_has_robot_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PathRequest::has_robot_name() const {
  return _internal_has_robot_name();
}
inline void PathRequest::clear_robot_name() {
  robot_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PathRequest::robot_name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.PathRequest.robot_name)
  return _internal_robot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathRequest::set_robot_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 robot_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.PathRequest.robot_name)
}
inline std::string* PathRequest::mutable_robot_name() {
  std::string* _s = _internal_mutable_robot_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.PathRequest.robot_name)
  return _s;
}
inline const std::string& PathRequest::_internal_robot_name() const {
  return robot_name_.Get();
}
inline void PathRequest::_internal_set_robot_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  robot_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathRequest::_internal_mutable_robot_name() {
  _has_bits_[0] |= 0x00000002u;
  return robot_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathRequest::release_robot_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.PathRequest.robot_name)
  if (!_internal_has_robot_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = robot_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    robot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PathRequest::set_allocated_robot_name(std::string* robot_name) {
  if (robot_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  robot_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    robot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.PathRequest.robot_name)
}

// repeated .free_fleet_data.Location path = 3;
inline int PathRequest::_internal_path_size() const {
  return path_.size();
}
inline int PathRequest::path_size() const {
  return _internal_path_size();
}
inline void PathRequest::clear_path() {
  path_.Clear();
}
inline ::free_fleet_data::Location* PathRequest::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:free_fleet_data.PathRequest.path)
  return path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location >*
PathRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:free_fleet_data.PathRequest.path)
  return &path_;
}
inline const ::free_fleet_data::Location& PathRequest::_internal_path(int index) const {
  return path_.Get(index);
}
inline const ::free_fleet_data::Location& PathRequest::path(int index) const {
  // @@protoc_insertion_point(field_get:free_fleet_data.PathRequest.path)
  return _internal_path(index);
}
inline ::free_fleet_data::Location* PathRequest::_internal_add_path() {
  return path_.Add();
}
inline ::free_fleet_data::Location* PathRequest::add_path() {
  ::free_fleet_data::Location* _add = _internal_add_path();
  // @@protoc_insertion_point(field_add:free_fleet_data.PathRequest.path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::free_fleet_data::Location >&
PathRequest::path() const {
  // @@protoc_insertion_point(field_list:free_fleet_data.PathRequest.path)
  return path_;
}

// required string task_id = 4;
inline bool PathRequest::_internal_has_task_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PathRequest::has_task_id() const {
  return _internal_has_task_id();
}
inline void PathRequest::clear_task_id() {
  task_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PathRequest::task_id() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.PathRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.PathRequest.task_id)
}
inline std::string* PathRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.PathRequest.task_id)
  return _s;
}
inline const std::string& PathRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void PathRequest::_internal_set_task_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathRequest::_internal_mutable_task_id() {
  _has_bits_[0] |= 0x00000004u;
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:free_fleet_data.PathRequest.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = task_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PathRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.PathRequest.task_id)
}

// -------------------------------------------------------------------

// DestinationRequest

// required string fleet_name = 1;
inline bool DestinationRequest::_internal_has_fleet_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DestinationRequest::has_fleet_name() const {
  return _internal_has_fleet_name();
}
inline void DestinationRequest::clear_fleet_name() {
  fleet_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DestinationRequest::fleet_name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.DestinationRequest.fleet_name)
  return _internal_fleet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DestinationRequest::set_fleet_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 fleet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.DestinationRequest.fleet_name)
}
inline std::string* DestinationRequest::mutable_fleet_name() {
  std::string* _s = _internal_mutable_fleet_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.DestinationRequest.fleet_name)
  return _s;
}
inline const std::string& DestinationRequest::_internal_fleet_name() const {
  return fleet_name_.Get();
}
inline void DestinationRequest::_internal_set_fleet_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fleet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DestinationRequest::_internal_mutable_fleet_name() {
  _has_bits_[0] |= 0x00000001u;
  return fleet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DestinationRequest::release_fleet_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.DestinationRequest.fleet_name)
  if (!_internal_has_fleet_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = fleet_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fleet_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fleet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DestinationRequest::set_allocated_fleet_name(std::string* fleet_name) {
  if (fleet_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fleet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fleet_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fleet_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    fleet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.DestinationRequest.fleet_name)
}

// required string robot_name = 2;
inline bool DestinationRequest::_internal_has_robot_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DestinationRequest::has_robot_name() const {
  return _internal_has_robot_name();
}
inline void DestinationRequest::clear_robot_name() {
  robot_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DestinationRequest::robot_name() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.DestinationRequest.robot_name)
  return _internal_robot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DestinationRequest::set_robot_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 robot_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.DestinationRequest.robot_name)
}
inline std::string* DestinationRequest::mutable_robot_name() {
  std::string* _s = _internal_mutable_robot_name();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.DestinationRequest.robot_name)
  return _s;
}
inline const std::string& DestinationRequest::_internal_robot_name() const {
  return robot_name_.Get();
}
inline void DestinationRequest::_internal_set_robot_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  robot_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DestinationRequest::_internal_mutable_robot_name() {
  _has_bits_[0] |= 0x00000002u;
  return robot_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DestinationRequest::release_robot_name() {
  // @@protoc_insertion_point(field_release:free_fleet_data.DestinationRequest.robot_name)
  if (!_internal_has_robot_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = robot_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    robot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DestinationRequest::set_allocated_robot_name(std::string* robot_name) {
  if (robot_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  robot_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    robot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.DestinationRequest.robot_name)
}

// required .free_fleet_data.Location destination = 3;
inline bool DestinationRequest::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || destination_ != nullptr);
  return value;
}
inline bool DestinationRequest::has_destination() const {
  return _internal_has_destination();
}
inline void DestinationRequest::clear_destination() {
  if (destination_ != nullptr) destination_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::free_fleet_data::Location& DestinationRequest::_internal_destination() const {
  const ::free_fleet_data::Location* p = destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::free_fleet_data::Location&>(
      ::free_fleet_data::_Location_default_instance_);
}
inline const ::free_fleet_data::Location& DestinationRequest::destination() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.DestinationRequest.destination)
  return _internal_destination();
}
inline void DestinationRequest::unsafe_arena_set_allocated_destination(
    ::free_fleet_data::Location* destination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  destination_ = destination;
  if (destination) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:free_fleet_data.DestinationRequest.destination)
}
inline ::free_fleet_data::Location* DestinationRequest::release_destination() {
  _has_bits_[0] &= ~0x00000008u;
  ::free_fleet_data::Location* temp = destination_;
  destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::free_fleet_data::Location* DestinationRequest::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:free_fleet_data.DestinationRequest.destination)
  _has_bits_[0] &= ~0x00000008u;
  ::free_fleet_data::Location* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::free_fleet_data::Location* DestinationRequest::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000008u;
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::free_fleet_data::Location>(GetArenaForAllocation());
    destination_ = p;
  }
  return destination_;
}
inline ::free_fleet_data::Location* DestinationRequest::mutable_destination() {
  ::free_fleet_data::Location* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.DestinationRequest.destination)
  return _msg;
}
inline void DestinationRequest::set_allocated_destination(::free_fleet_data::Location* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::free_fleet_data::Location>::GetOwningArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.DestinationRequest.destination)
}

// required string task_id = 4;
inline bool DestinationRequest::_internal_has_task_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DestinationRequest::has_task_id() const {
  return _internal_has_task_id();
}
inline void DestinationRequest::clear_task_id() {
  task_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DestinationRequest::task_id() const {
  // @@protoc_insertion_point(field_get:free_fleet_data.DestinationRequest.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DestinationRequest::set_task_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:free_fleet_data.DestinationRequest.task_id)
}
inline std::string* DestinationRequest::mutable_task_id() {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:free_fleet_data.DestinationRequest.task_id)
  return _s;
}
inline const std::string& DestinationRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void DestinationRequest::_internal_set_task_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DestinationRequest::_internal_mutable_task_id() {
  _has_bits_[0] |= 0x00000004u;
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DestinationRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:free_fleet_data.DestinationRequest.task_id)
  if (!_internal_has_task_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = task_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DestinationRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (task_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:free_fleet_data.DestinationRequest.task_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace free_fleet_data

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::free_fleet_data::RobotMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::free_fleet_data::RobotMode>() {
  return ::free_fleet_data::RobotMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FleetMessages_2eproto
